{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to DocOcean\n\n\nDocOcean is my flashcard pack. Its a repository where I save all my notes, reference docs, cheetsheets and hacks that have helped add a spring in my step. Would be glad if it helps you too! \n\n\n\n\n\n  \n\n\nMay the odds be ever in your favour!",
            "title": "Welcome to DocOcean"
        },
        {
            "location": "/#welcome-to-dococean",
            "text": "DocOcean is my flashcard pack. Its a repository where I save all my notes, reference docs, cheetsheets and hacks that have helped add a spring in my step. Would be glad if it helps you too!    \n    May the odds be ever in your favour!",
            "title": "Welcome to DocOcean"
        },
        {
            "location": "/GitHub/git_cheatsheet/",
            "text": "vs\n Questions\n\n\n\n\n\n\nhttp://stackoverflow.com/questions/804115\n  (\nrebase\n vs \nmerge\n).\n\n\nhttps://www.atlassian.com/git/tutorials/merging-vs-rebasing\n (\nrebase\n vs \nmerge\n)\n\n\nhttps://www.atlassian.com/git/tutorials/undoing-changes/\n (\nreset\n vs \ncheckout\n vs \nrevert\n)\n\n\nhttp://stackoverflow.com/questions/2221658\n (HEAD^ vs HEAD~) (See \ngit rev-parse\n)\n\n\nhttp://stackoverflow.com/questions/292357\n (\npull\n vs \nfetch\n)\n\n\nhttp://stackoverflow.com/questions/39651\n (\nstash\n vs \nbranch\n)\n\n\nhttp://stackoverflow.com/questions/8358035\n (\nreset\n vs \ncheckout\n vs \nrevert\n)\n\n\nhttp://stackoverflow.com/questions/5798930\n (\ngit reset\n vs \ngit rm --cached\n)\n\n\n\n\nGENERAL QUESTIONS\n\n\n\n\n\n\nhttp://stackoverflow.com/questions/5788037\n (Recover from \ngit reset --hard\n).\n\n\nhttp://stackoverflow.com/questions/1146973/\n (Revert all local changes to previous state)\n\n\nhttp://effectif.com/git/recovering-lost-git-commits\n (Recovering lost commit)\n\n\n\n\nSHORT GIT REFERENCE\n\n\n\n\n\n\nAll Git tips (\nhttps://github.com/git-tips/tips\n). Must See.\n\n\nFirst download the cheatsheet from official site: \nhttp://git-scm.com\n\n\nNow only these commands are important:\n\n\nConfiguring : \nconfig, help\n.\n\n\nCreating : \ninit, clone\n.\n\n\nMake Changes: \nstatus, diff, add, commit, reset, rm, mv (not important)\n.\n\n\nBranching & Merging: \nbranch, checkout, merge, stash\n\n\nReview History: \nlog, tag, diff, show\n\n\nUpdate and Publish: \nfetch, pull, push, remote\n.\n\n\nVery Imp: \nreflog\n . \nhttp://effectif.com/git/recovering-lost-git-commits\n\n\n\n\n\n\nCommands that are not in cheatsheet (and advanced): \nrevert, apply, cherry-pick, rebase, clean, show-ref, update-ref, ls-files\n\n\ngit stash\n is lightweight alternative to \ngit branch\n.\n\n\n\n\n\n\nFor fast reference see: \nhttp://gitref.org/\n\n\nGit Tips: \nhttp://gitready.com/\n\n\nGit has three stages:\n\n\nCommitted : means data is safely stored in your local database.\n\n\nModified :  means you've changed the file but not committed.\n\n\nStaged : means you've marked a modified file in its current version to go into your next commit snapshot.\n\n\n\n\n\n\nWorkflow of git:\n\n\nWorking Directory: holds the actual files\n\n\nIndex: Acts as a staging area. That is, snapshot for next commit. Will be done by \ngit add\n command.\n\n\nHEAD : Points to the last commit (and current branch) you've made.\n\n\n\n\n\n\nAnything that is committed in Git can almost be recovered. However files which are not committed can't be recovered.\n\n\nDescription of Update and Fetch Commands:\n\n\nremote\n: it only manage set of track repositories.\n\n\nfetch\n: You can fetch new work from that remote server after cloning. Not similar to \nclone\n. You can later merge that repo with your existing with \nmerge\n command.\n\n\npull\n: Automatically fetch and merge newest commit from remote server to local branch. By default, it combines fetch and merge.\n\n\npush\n: This will push to the remote server from local branch.\n\n\n\n\n\n\nWhen you do branch switching, files in your working directory will change to match that branch.\n\n\nUsing \ngit reflog\n you can get back your destroyed commit (done via \ngit reset --hard\n) using either  \n\n\ngit checkout -b newBranchName <shaViaReflog>\n\n\ngit reset --hard <shaViaReflog>\n\nBut use it in rare cases, because you reflog keep state via sha and it's hard to see which sha belongs to specific commit.\n\n\n\n\n\n\ngit cherry-pick\n is a low level version of \nrebase\n.\n\n\n\n\nGIT TIPS AND SHORTCUTS\n\n\n\n\nMost used commands are: \ninit, clone, status, log, add, commit, reset, rm, branch, checkout, merge, stash\n\n\n    \n## -- Initializing a new git repository\n\n        \n$$\n git init\n\n    \n## -- Useful git log commands\n\n        \n$$\n git log --oneline        \n## print short sha in one line\n\n        \n$$\n git log -3               \n## show only first 3 commit\n\n        \n$$\n git log --author\n=\n\"John\"\n  \n## show commits only by this author\n\n\n\n    \n## -- Cloning a git repository\n\n    \n## The other protocols are: ssh, ftp, file://, http(s):// etc...\n\n        \n$$\n git clone git://github.com/something/foo.git\n\n    \n## -- Show the status of file\n\n        \n$$\n git status -s  \n# in short format\n\n\n    \n## -- Add the file to staging area.\n\n        \n$$\n git add foo.js bar.js   \n## `--` is used to seperate files from `add` options.\n\n        \n$$\n git add .    \n# add all the files\n\n\n    \n## -- Show what have changed since you last commit\n\n        \n$$\n git diff  \n## with a `--cached` option, show the changes that will go into the next commit snapshot.\n\n\n    \n## -- Commit the changes after you add the files to staging area\n\n        \n$$\n git commit -m \n'with an inline message'\n\n\n    \n## -- Auto-commit and track changes to modified file.\n\n    \n## NOTE: The files you've not added doesn't track by commit with `-a` command.\n\n        \n$$\n git commit -a -m \n'with an inline message'\n\n\n    \n## -- Ammend last commit (i.e, merge to previous commit)\n\n    \n## https://nathanhoad.net/git-amend-your-last-commit\n\n    \n## After doing `git add .`\n\n        \n$$\n git commit --amend   \n# alternate is `git reset --soft HEAD~`.\n\n        \n## amend a commit without changing previous message\n\n        \n$$\n git commit --amend --no-edit\n\n\n    \n## -- Unstage file from the index only.  See `git reset` also.\n\n    \n## NOTE: `git rm` without `--cached` will simply remove the file from both index and working directory.\n\n        \n$$\n git rm --cached  \n# exact opposite of git add.\n\n\n    \n## -- Throw away local changes after commit (Use with caution)\n\n        \n$$\n git checkout <file>  \n        \n# if the branch name and file name are same, then do this\n\n        \n$$\n git checkout -- <file>\n        \n## for all changes (it's perfect for time travel on previous commit)\n\n        \n$$\n git checkout -f \n# or `git reset --hard` (but previous one is more safer because with that you're in detached state.)\n\n\n\n    \n## Delete a single entry from git reflog. (git reflog is useful as it keeps 2 months history).\n\n        \n$$\n git reflog delete HEAD@\n{\nN\n}\n    \n## `N`: 1,2 etc... or <sha>\n\n\n    \n## Undo the last commit, but keep the history and adds a new history\n\n    \n## http://stackoverflow.com/questions/27032850/ (for `git reset` vs `git revert` with image)\n\n        \n$$\n git revert\n\n    \n## -- check where HEAD is\n\n        \n$$\n git show-ref\n\n    \n## Remove the initial commit (git reset doesn't work here, it works only after second commit)\n\n    \n## http://stackoverflow.com/questions/6632191/how-to-revert-initial-git-commit\n\n        \n$$\n git update-ref -d HEAD\n\n\n    \n## Push a specific branch\n\n        \n$$\n git push origin <mylocalbranch>\n\n    \n## -- Detailed explaination of `git reset` (all three options). P.S. Use git checkout for time travel.\n\n    \n## http://stackoverflow.com/a/6866485/2092405\n\n    \n## NOTE: All the below three options remove log, so if you want to get back to previous state, you can pick\n\n    \n## <sha> from git reflog and do git reset on this.\n\n    \n## Suppose the structure is\n\n         A-B-C\n             \u2191 \n(\nmaster\n)\n\n    \n## Then, nuke commit C and never see it again. Do this:\n\n        \n$$\n git reset --hard HEAD~1\n        \n## the result is:\n\n             A-B\n               \u2191 \n(\nmaster\n)\n\n       \n## To undo this command, use;\n\n           \n$$\n git reset --hard <newShaOfReflog>  \n## or (git reset --hard HEAD@{1})\n\n\n    \n## Undo the last commit, but keep your changes in working directory.\n\n    \n## It will delete the index the from git log also and show you untracked and unstaged files:\n\n        \n$$\n git reset HEAD~1  \n## move the pointer one index back (or git reset --mixed HEAD~1)\n\n        \n## the result is:\n\n        A-B-C\n          \u2191 \n(\nmaster\n)\n\n        \n## To undo this command, use;\n\n            \n$$\n git reset <newShaOfReflog>  \n## or (git reset HEAD@{1})\n\n\n    \n## Undo the last commit, but don't touch the index and working directory.\n\n    \n## When you do git status, you'll see that the same files are in the index as before.\n\n    \n## In fact, right after this command, you could do `git commit` and you'd be redoing the same commit you just had.\n\n        \n$$\n git reset --soft HEAD~1\n\n\n    \n## Add a changed file to old commit (not last commit). I.E., fix up old commit\n\n    http://stackoverflow.com/a/2719659/2092405\n\n    \n## merge a specific commit from one branch to another branch.\n\n        \n## make sure you're in the branch where you want merge.\n\n        \n$$\n git cherry-pick <commit-id-of-feature-branch>\n\n    \n## Merge two specific commit together (using rebase)\n\n    http://stackoverflow.com/questions/2563632/how-can-i-merge-two-commits-into-one\n\n    \n## Modify a specific commit in git\n\n    http://stackoverflow.com/questions/1186535/how-to-modify-a-specified-commit-in-git\n    \n## if you're getting this error. Needs a single revision. See this: http://stackoverflow.com/questions/26174757/\n\n    \n## Option: 2\n\n    $ git checkout <shaToThatCommit>\n    touch newfile.txt\n    git add .\n    git commit --amend --no-edit\n    git rebase --onto HEAD <shaToThatCommit> master  \n## it will do automatic git checkout to master branch\n\n\n\n    \n## Branching and Merging\n\n    \n## ---------------------\n\n    \n## List out all the branches\n\n    \n$$\n git branch\n    \n## Create a new branch `testing` at your last commit\n\n    \n$$\n git branch testing\n    \n## Switch to branch\n\n    \n$$\n git checkout testing\n    \n## Shortcut to create a new branch and checkout\n\n    \n$$\n git checkout -b newbranch\n    \n## Delete a branch\n\n    \n$$\n git branch -d testing\n    \n## Merge the <branch> on the current working branch\n\n    \n## Merge tip: If you're doing merge say, from `wip` to `live` branch and you've edit `live` branch files\n\n    \n## then it will not undo changed file which is what we want.\n\n    \n## Also, merge conflict occurs when same file changed in both branch, you merged. You can reverse the merge conflict\n\n    \n## with `--abort` option\n\n    \n$$\n git merge testing    \n## this will merge `testing` branch onto current (`master`) branch.\n\n    \n## checkout arbitrary commits instead of branch\n\n    \n$$\n git checkout HEAD~2\n    \n## Undo deleted branch\n\n    \n$$\n git reflog    \n## to see the hash code of branch before deletion.\n\n    \n$$\n git checkout <hashcodeFromReflog>  \n## to restore, and then create the same branch from there.\n\n\n\n\nGit reset vs Git revert\n\n\n\n\nNOTE\n: \ngit revert\n is advanced command and it may accidently delete your files, if you haven't committed.\n\nhttp://stackoverflow.com/questions/8358035/whats-the-difference-between-git-revert-checkout-and-reset\n\nBasically \ngit revert\n undo changes with new commit history (i.e., introduce a new commit that reverse the specified one) while \ngit reset\n (with \n--hard\n) \nBEWARE\n. Any changes to tracked files in the working tree and index are discarded.\n\ngit reset\n (with \n--soft\n) option doesn't touch the index file nor working tree. In this case, index file is staged but not committed and right after this command you can use \ngit commit\n.\n\ngit reset\n (with \n--mixed\n) option reset the index but not the working tree. In this case, index file is not staged, so after this command you have to use \ngit add\n and \ngit commit\n.\n\n\nGit rm and Git reset\n\n\n\n\ngit rm\n remove the file from the index (with \n--cached\n option).\n\ngit reset\n is specifically about updating the index, moving the HEAD.\nThese two options are \nequivalent only when we first add a file\n. After that with \ngit reset\n you can move the index while with \ngit rm --cached\n, you completly destroy the index.\n\n\nFix a \nhead detached from\n message\n\n\n\n\nhttp://stackoverflow.com/questions/10228760/fix-a-git-detached-head\n\nBasically checkout the branch using \ngit checkout branchname\n\n\nRelative Refs\n\n\n\n\nhttps://www.atlassian.com/git/tutorials/refs-and-the-reflog/refspecs\n\nThe \n~\n character lets you reach parent commits. For eg: The following display the grandparent of HEAD:\n\ngit show HEAD~2\n. The \n~\n character will always follow the first parent of a merge commit.\nIf you want to follow different parent, use \n^\n character\nFor eg: If HEAD is the merge commit, then following returns the second parent of HEAD:\n\ngit show HEAD^2\n\nSome examples:\n\n\n    \n# Only list commits that are parent of the second parent of a merge commit\n\n    \n$$\n git log HEAD^2\n    \n# Remove the last 3 commits from the current branch\n\n    \n$$\n git reset HEAD~3\n    \n# Interactively rebase the last 3 commits on the current branch\n\n    \n$$\n git rebase -i HEAD~3\n\n\n\nGit \nfetch\n, \npull\n, \npush\n, \nremote\n\n\n\n\nNOTE: You can't push to non-bare repository if the branches are same on both remote and local server\n\nBy default updating the current branch with non-bare repo is denied. If you're the only user, you can set git config\n\ngit config --bool core.bare true\n and then delete all files except \n.git\n in remote.\n\nhttp://stackoverflow.com/a/2933656/2092405\n\nSome common git urls:\n\n\n    ssh://\n[\nuser@\n]\nhost.xz\n[\n:port\n]\n/path/to/repo.git/\n    git://host.xz\n[\n:port\n]\n/path/to/repo.git/\n    http\n[\ns\n]\n://host.xz\n[\n:port\n]\n/path/to/repo.git/\n    ftp\n[\ns\n]\n://host.xz\n[\n:port\n]\n/path/to/repo.git/\n    \n[\nuser@\n]\nhost.xz:path/to/repo.git/\n    /path/to/repo.git/\n    file:///path/to/repo.git/\n\n\n\ngit pull\n is basically shorthand for \ngit fetch\n followed by \ngit merge FETCH_HEAD\n\n\ngit fetch\n: Downlaod new data and branches from remote repository\n\ngit push\n: Push your new branches to remote repository.\n\ngit remote\n: Manage (list, add and delete) remote repository aliases.\n\n\n\n\nTo push local repository to your server\n\n\n\n\n    \n## On your server (create a bare repository)\n\n    \n$$\n git init --bare repo.git\n    \n## On local\n\n    \n$$\n git remote add origin ssh://server/var/www/frontend.git\n    \n$$\n git push origin master\n    \n## After that, use:\n\n    \n$$\n \ncd\n /var/www/\n;\n git init\n;\n git clone frontend.git\n\n    \n## or alternative way without bare repository\n\n    \n## switch to different branch locally\n\n    \n## and then on your server\n\n    \n$$\n git init\n    \n## from local repository\n\n    \n$$\n git push ssh://server/path/to/git otherBranch\n    \n## then merge the otherBranch to master in remote repository\n\n\n    \n## Shortcut without switching repository\n\n    \n$$\n git remote add origin ssh://server/path/to/git\n    \n$$\n git push origin master:someOtherBranch       \n## this push from master to `someOtherBranch`.\n\n\n\n\nEND",
            "title": "Git cheatsheet"
        },
        {
            "location": "/GitHub/git_cheatsheet/#vs-questions",
            "text": "http://stackoverflow.com/questions/804115   ( rebase  vs  merge ).  https://www.atlassian.com/git/tutorials/merging-vs-rebasing  ( rebase  vs  merge )  https://www.atlassian.com/git/tutorials/undoing-changes/  ( reset  vs  checkout  vs  revert )  http://stackoverflow.com/questions/2221658  (HEAD^ vs HEAD~) (See  git rev-parse )  http://stackoverflow.com/questions/292357  ( pull  vs  fetch )  http://stackoverflow.com/questions/39651  ( stash  vs  branch )  http://stackoverflow.com/questions/8358035  ( reset  vs  checkout  vs  revert )  http://stackoverflow.com/questions/5798930  ( git reset  vs  git rm --cached )",
            "title": "vs Questions"
        },
        {
            "location": "/GitHub/git_cheatsheet/#general-questions",
            "text": "http://stackoverflow.com/questions/5788037  (Recover from  git reset --hard ).  http://stackoverflow.com/questions/1146973/  (Revert all local changes to previous state)  http://effectif.com/git/recovering-lost-git-commits  (Recovering lost commit)",
            "title": "GENERAL QUESTIONS"
        },
        {
            "location": "/GitHub/git_cheatsheet/#short-git-reference",
            "text": "All Git tips ( https://github.com/git-tips/tips ). Must See.  First download the cheatsheet from official site:  http://git-scm.com  Now only these commands are important:  Configuring :  config, help .  Creating :  init, clone .  Make Changes:  status, diff, add, commit, reset, rm, mv (not important) .  Branching & Merging:  branch, checkout, merge, stash  Review History:  log, tag, diff, show  Update and Publish:  fetch, pull, push, remote .  Very Imp:  reflog  .  http://effectif.com/git/recovering-lost-git-commits    Commands that are not in cheatsheet (and advanced):  revert, apply, cherry-pick, rebase, clean, show-ref, update-ref, ls-files  git stash  is lightweight alternative to  git branch .    For fast reference see:  http://gitref.org/  Git Tips:  http://gitready.com/  Git has three stages:  Committed : means data is safely stored in your local database.  Modified :  means you've changed the file but not committed.  Staged : means you've marked a modified file in its current version to go into your next commit snapshot.    Workflow of git:  Working Directory: holds the actual files  Index: Acts as a staging area. That is, snapshot for next commit. Will be done by  git add  command.  HEAD : Points to the last commit (and current branch) you've made.    Anything that is committed in Git can almost be recovered. However files which are not committed can't be recovered.  Description of Update and Fetch Commands:  remote : it only manage set of track repositories.  fetch : You can fetch new work from that remote server after cloning. Not similar to  clone . You can later merge that repo with your existing with  merge  command.  pull : Automatically fetch and merge newest commit from remote server to local branch. By default, it combines fetch and merge.  push : This will push to the remote server from local branch.    When you do branch switching, files in your working directory will change to match that branch.  Using  git reflog  you can get back your destroyed commit (done via  git reset --hard ) using either    git checkout -b newBranchName <shaViaReflog>  git reset --hard <shaViaReflog> \nBut use it in rare cases, because you reflog keep state via sha and it's hard to see which sha belongs to specific commit.    git cherry-pick  is a low level version of  rebase .",
            "title": "SHORT GIT REFERENCE"
        },
        {
            "location": "/GitHub/git_cheatsheet/#git-tips-and-shortcuts",
            "text": "Most used commands are:  init, clone, status, log, add, commit, reset, rm, branch, checkout, merge, stash       ## -- Initializing a new git repository \n         $$  git init\n\n     ## -- Useful git log commands \n         $$  git log --oneline         ## print short sha in one line \n         $$  git log -3                ## show only first 3 commit \n         $$  git log --author = \"John\"    ## show commits only by this author \n\n\n     ## -- Cloning a git repository \n     ## The other protocols are: ssh, ftp, file://, http(s):// etc... \n         $$  git clone git://github.com/something/foo.git\n\n     ## -- Show the status of file \n         $$  git status -s   # in short format \n\n     ## -- Add the file to staging area. \n         $$  git add foo.js bar.js    ## `--` is used to seperate files from `add` options. \n         $$  git add .     # add all the files \n\n     ## -- Show what have changed since you last commit \n         $$  git diff   ## with a `--cached` option, show the changes that will go into the next commit snapshot. \n\n     ## -- Commit the changes after you add the files to staging area \n         $$  git commit -m  'with an inline message' \n\n     ## -- Auto-commit and track changes to modified file. \n     ## NOTE: The files you've not added doesn't track by commit with `-a` command. \n         $$  git commit -a -m  'with an inline message' \n\n     ## -- Ammend last commit (i.e, merge to previous commit) \n     ## https://nathanhoad.net/git-amend-your-last-commit \n     ## After doing `git add .` \n         $$  git commit --amend    # alternate is `git reset --soft HEAD~`. \n         ## amend a commit without changing previous message \n         $$  git commit --amend --no-edit\n\n\n     ## -- Unstage file from the index only.  See `git reset` also. \n     ## NOTE: `git rm` without `--cached` will simply remove the file from both index and working directory. \n         $$  git rm --cached   # exact opposite of git add. \n\n     ## -- Throw away local changes after commit (Use with caution) \n         $$  git checkout <file>  \n         # if the branch name and file name are same, then do this \n         $$  git checkout -- <file>\n         ## for all changes (it's perfect for time travel on previous commit) \n         $$  git checkout -f  # or `git reset --hard` (but previous one is more safer because with that you're in detached state.) \n\n\n     ## Delete a single entry from git reflog. (git reflog is useful as it keeps 2 months history). \n         $$  git reflog delete HEAD@ { N }      ## `N`: 1,2 etc... or <sha> \n\n     ## Undo the last commit, but keep the history and adds a new history \n     ## http://stackoverflow.com/questions/27032850/ (for `git reset` vs `git revert` with image) \n         $$  git revert\n\n     ## -- check where HEAD is \n         $$  git show-ref\n\n     ## Remove the initial commit (git reset doesn't work here, it works only after second commit) \n     ## http://stackoverflow.com/questions/6632191/how-to-revert-initial-git-commit \n         $$  git update-ref -d HEAD\n\n\n     ## Push a specific branch \n         $$  git push origin <mylocalbranch>\n\n     ## -- Detailed explaination of `git reset` (all three options). P.S. Use git checkout for time travel. \n     ## http://stackoverflow.com/a/6866485/2092405 \n     ## NOTE: All the below three options remove log, so if you want to get back to previous state, you can pick \n     ## <sha> from git reflog and do git reset on this. \n     ## Suppose the structure is \n         A-B-C\n             \u2191  ( master ) \n     ## Then, nuke commit C and never see it again. Do this: \n         $$  git reset --hard HEAD~1\n         ## the result is: \n             A-B\n               \u2191  ( master ) \n        ## To undo this command, use; \n            $$  git reset --hard <newShaOfReflog>   ## or (git reset --hard HEAD@{1}) \n\n     ## Undo the last commit, but keep your changes in working directory. \n     ## It will delete the index the from git log also and show you untracked and unstaged files: \n         $$  git reset HEAD~1   ## move the pointer one index back (or git reset --mixed HEAD~1) \n         ## the result is: \n        A-B-C\n          \u2191  ( master ) \n         ## To undo this command, use; \n             $$  git reset <newShaOfReflog>   ## or (git reset HEAD@{1}) \n\n     ## Undo the last commit, but don't touch the index and working directory. \n     ## When you do git status, you'll see that the same files are in the index as before. \n     ## In fact, right after this command, you could do `git commit` and you'd be redoing the same commit you just had. \n         $$  git reset --soft HEAD~1\n\n\n     ## Add a changed file to old commit (not last commit). I.E., fix up old commit \n    http://stackoverflow.com/a/2719659/2092405\n\n     ## merge a specific commit from one branch to another branch. \n         ## make sure you're in the branch where you want merge. \n         $$  git cherry-pick <commit-id-of-feature-branch>\n\n     ## Merge two specific commit together (using rebase) \n    http://stackoverflow.com/questions/2563632/how-can-i-merge-two-commits-into-one\n\n     ## Modify a specific commit in git \n    http://stackoverflow.com/questions/1186535/how-to-modify-a-specified-commit-in-git\n     ## if you're getting this error. Needs a single revision. See this: http://stackoverflow.com/questions/26174757/ \n     ## Option: 2 \n    $ git checkout <shaToThatCommit>\n    touch newfile.txt\n    git add .\n    git commit --amend --no-edit\n    git rebase --onto HEAD <shaToThatCommit> master   ## it will do automatic git checkout to master branch \n\n\n     ## Branching and Merging \n     ## --------------------- \n     ## List out all the branches \n     $$  git branch\n     ## Create a new branch `testing` at your last commit \n     $$  git branch testing\n     ## Switch to branch \n     $$  git checkout testing\n     ## Shortcut to create a new branch and checkout \n     $$  git checkout -b newbranch\n     ## Delete a branch \n     $$  git branch -d testing\n     ## Merge the <branch> on the current working branch \n     ## Merge tip: If you're doing merge say, from `wip` to `live` branch and you've edit `live` branch files \n     ## then it will not undo changed file which is what we want. \n     ## Also, merge conflict occurs when same file changed in both branch, you merged. You can reverse the merge conflict \n     ## with `--abort` option \n     $$  git merge testing     ## this will merge `testing` branch onto current (`master`) branch. \n     ## checkout arbitrary commits instead of branch \n     $$  git checkout HEAD~2\n     ## Undo deleted branch \n     $$  git reflog     ## to see the hash code of branch before deletion. \n     $$  git checkout <hashcodeFromReflog>   ## to restore, and then create the same branch from there.",
            "title": "GIT TIPS AND SHORTCUTS"
        },
        {
            "location": "/GitHub/git_cheatsheet/#git-reset-vs-git-revert",
            "text": "NOTE :  git revert  is advanced command and it may accidently delete your files, if you haven't committed. http://stackoverflow.com/questions/8358035/whats-the-difference-between-git-revert-checkout-and-reset \nBasically  git revert  undo changes with new commit history (i.e., introduce a new commit that reverse the specified one) while  git reset  (with  --hard )  BEWARE . Any changes to tracked files in the working tree and index are discarded. git reset  (with  --soft ) option doesn't touch the index file nor working tree. In this case, index file is staged but not committed and right after this command you can use  git commit . git reset  (with  --mixed ) option reset the index but not the working tree. In this case, index file is not staged, so after this command you have to use  git add  and  git commit .",
            "title": "Git reset vs Git revert"
        },
        {
            "location": "/GitHub/git_cheatsheet/#git-rm-and-git-reset",
            "text": "git rm  remove the file from the index (with  --cached  option). git reset  is specifically about updating the index, moving the HEAD.\nThese two options are  equivalent only when we first add a file . After that with  git reset  you can move the index while with  git rm --cached , you completly destroy the index.",
            "title": "Git rm and Git reset"
        },
        {
            "location": "/GitHub/git_cheatsheet/#fix-a-head-detached-from-message",
            "text": "http://stackoverflow.com/questions/10228760/fix-a-git-detached-head \nBasically checkout the branch using  git checkout branchname",
            "title": "Fix a head detached from message"
        },
        {
            "location": "/GitHub/git_cheatsheet/#relative-refs",
            "text": "https://www.atlassian.com/git/tutorials/refs-and-the-reflog/refspecs \nThe  ~  character lets you reach parent commits. For eg: The following display the grandparent of HEAD: git show HEAD~2 . The  ~  character will always follow the first parent of a merge commit.\nIf you want to follow different parent, use  ^  character\nFor eg: If HEAD is the merge commit, then following returns the second parent of HEAD: git show HEAD^2 \nSome examples:       # Only list commits that are parent of the second parent of a merge commit \n     $$  git log HEAD^2\n     # Remove the last 3 commits from the current branch \n     $$  git reset HEAD~3\n     # Interactively rebase the last 3 commits on the current branch \n     $$  git rebase -i HEAD~3",
            "title": "Relative Refs"
        },
        {
            "location": "/GitHub/git_cheatsheet/#git-fetch-pull-push-remote",
            "text": "NOTE: You can't push to non-bare repository if the branches are same on both remote and local server \nBy default updating the current branch with non-bare repo is denied. If you're the only user, you can set git config git config --bool core.bare true  and then delete all files except  .git  in remote. http://stackoverflow.com/a/2933656/2092405 \nSome common git urls:      ssh:// [ user@ ] host.xz [ :port ] /path/to/repo.git/\n    git://host.xz [ :port ] /path/to/repo.git/\n    http [ s ] ://host.xz [ :port ] /path/to/repo.git/\n    ftp [ s ] ://host.xz [ :port ] /path/to/repo.git/\n     [ user@ ] host.xz:path/to/repo.git/\n    /path/to/repo.git/\n    file:///path/to/repo.git/  git pull  is basically shorthand for  git fetch  followed by  git merge FETCH_HEAD  git fetch : Downlaod new data and branches from remote repository git push : Push your new branches to remote repository. git remote : Manage (list, add and delete) remote repository aliases.   To push local repository to your server        ## On your server (create a bare repository) \n     $$  git init --bare repo.git\n     ## On local \n     $$  git remote add origin ssh://server/var/www/frontend.git\n     $$  git push origin master\n     ## After that, use: \n     $$   cd  /var/www/ ;  git init ;  git clone frontend.git\n\n     ## or alternative way without bare repository \n     ## switch to different branch locally \n     ## and then on your server \n     $$  git init\n     ## from local repository \n     $$  git push ssh://server/path/to/git otherBranch\n     ## then merge the otherBranch to master in remote repository \n\n     ## Shortcut without switching repository \n     $$  git remote add origin ssh://server/path/to/git\n     $$  git push origin master:someOtherBranch        ## this push from master to `someOtherBranch`.",
            "title": "Git fetch, pull, push, remote"
        },
        {
            "location": "/GitHub/git_cheatsheet/#end",
            "text": "",
            "title": "END"
        },
        {
            "location": "/GitHub/gitignore/",
            "text": "Adding a .gitignore into an exiting repository\n\n\n\n\n\n\nCreate a .gitignore file within your repo using the touch command:\n\n\n\n\ntouch .gitignore\n\n\n\n\n\n\n\n\nCommit all your pending changes using\n\n\n\n\n\n\n\n\nNote\n\n\nThe \ngit rm\n command deletes files both from the Git repository as well as the filesystem. Using the \ncached\n flag, the actual file on disk will not be deleted.\n\n\n\n\n\n\n\n\nThen just stage all the files again by running:\n\n\n\n\ngit add .\n\n\n\n\n\n\n\n\nNext Commit the staged changes, using:\n\n\n\n\ngit commit -m \".gitignore is now working\"\n\n\n\n\n\n\n\n\nFinally push the commit to your repo:\n\n\n\n\ngit push origin /<master/branch_name/>\n\n\n\n\n\n\n\n\n\n\nCaution\n\n\nPlease be careful, when you push this to a repository and pull from somewhere else into a state where those files are still tracked, the files will be DELETED\n\n\n\n\nReferences\n\n\n \nStackoverflow: Apply .gitignore on an existing repository already tracking large number of files",
            "title": "Gitignore"
        },
        {
            "location": "/GitHub/gitignore/#adding-a-gitignore-into-an-exiting-repository",
            "text": "Create a .gitignore file within your repo using the touch command:   touch .gitignore     Commit all your pending changes using     Note  The  git rm  command deletes files both from the Git repository as well as the filesystem. Using the  cached  flag, the actual file on disk will not be deleted.     Then just stage all the files again by running:   git add .     Next Commit the staged changes, using:   git commit -m \".gitignore is now working\"     Finally push the commit to your repo:   git push origin /<master/branch_name/>      Caution  Please be careful, when you push this to a repository and pull from somewhere else into a state where those files are still tracked, the files will be DELETED",
            "title": "Adding a .gitignore into an exiting repository"
        },
        {
            "location": "/GitHub/gitignore/#references",
            "text": "Stackoverflow: Apply .gitignore on an existing repository already tracking large number of files",
            "title": "References"
        },
        {
            "location": "/MkDocs/",
            "text": "Commands\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nProject layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n\n\n\nUpgrade Mkdocs\n\n\n\n\npip3 install --upgrade mkdocs mkdocs-material\n\n\ncd mkdocsDir\n\n\nmkdocs build --clean\n\n\n\n\nReverting to an older version of Mkdocs\n\n\n\n\npip install mkdocs==0.16.1 mkdocs-material==1.2.0",
            "title": "Home"
        },
        {
            "location": "/MkDocs/#commands",
            "text": "mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.",
            "title": "Commands"
        },
        {
            "location": "/MkDocs/#project-layout",
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.",
            "title": "Project layout"
        },
        {
            "location": "/MkDocs/#upgrade-mkdocs",
            "text": "pip3 install --upgrade mkdocs mkdocs-material  cd mkdocsDir  mkdocs build --clean",
            "title": "Upgrade Mkdocs"
        },
        {
            "location": "/MkDocs/#reverting-to-an-older-version-of-mkdocs",
            "text": "pip install mkdocs==0.16.1 mkdocs-material==1.2.0",
            "title": "Reverting to an older version of Mkdocs"
        },
        {
            "location": "/MkDocs/markdown-cheat-sheet/",
            "text": "Markdown Cheat Sheet\n\n\nThanks for visiting \nThe Markdown Guide\n!\n\n\nThis Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can\u2019t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for \nbasic syntax\n and \nextended syntax\n.\n\n\nBasic Syntax\n\n\nThese are the elements outlined in John Gruber\u2019s original design document. All Markdown applications support these elements.\n\n\nHeading\n\n\n# H1\n\n\n## H2\n\n\n### H3\n\n\n\n\nBold\n\n\n**bold text**\n\n\n\n\nItalic\n\n\n*italicized text*\n\n\n\n\nBlockquote\n\n\n> \nblockquote\n\n\n\n\nOrdered List\n\n\n1.\n First item\n\n2.\n Second item\n\n3.\n Third item\n\n\n\nUnordered List\n\n\n-\n First item\n\n-\n Second item\n\n-\n Third item\n\n\n\nCode\n\n\n`code`\n\n\n\nHorizontal Rule\n\n\n---\n\n\n\nLink\n\n\n[\nMarkdown Guide\n](\nhttps://www.markdownguide.org\n)\n\n\n\nImage\n\n\n![\nalt text\n](\nhttps://www.markdownguide.org/assets/images/tux.png\n)\n\n\n\nExtended Syntax\n\n\nThese elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements.\n\n\nTable\n\n\n| Syntax | Description |\n| ----------- | ----------- |\n| Header | Title |\n| Paragraph | Text |\n\n\n\nFenced Code Block\n\n\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}\n\n\n\nFootnote\n\n\nHere's a sentence with a footnote. [^1]\n\n[\n^1\n]: \nThis is the footnote.\n\n\n\n\nHeading ID\n\n\n### My Great Heading ```{#custom-id}```\n\n\n\n\nDefinition List\n\n\nterm\n: definition\n\n\n\nStrikethrough\n\n\n~~The world is flat.~~\nor\n<s>The world is flat</s>\n\n\n\nTask List\n\n\n- [x] Write the press release\n- [ ] Update the website\n- [ ] Contact the media\n\n\n\nEmoji\n\n\nThat is so funny! \n:joy:\n\n\n(See also \nCopying and Pasting Emoji\n)\n\n\nHighlight\n\n\nI need to highlight these \n==very important words==\n.\n\n\nOR\n\n\nI need to highlight these \n<mark> very important words <mark>\n.\n\n\nSubscript\n\n\nH~2~O\n\n\n\nSuperscript\n\n\nX^2^",
            "title": "Markdown Cheat Sheet"
        },
        {
            "location": "/MkDocs/markdown-cheat-sheet/#markdown-cheat-sheet",
            "text": "Thanks for visiting  The Markdown Guide !  This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can\u2019t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for  basic syntax  and  extended syntax .",
            "title": "Markdown Cheat Sheet"
        },
        {
            "location": "/MkDocs/markdown-cheat-sheet/#basic-syntax",
            "text": "These are the elements outlined in John Gruber\u2019s original design document. All Markdown applications support these elements.",
            "title": "Basic Syntax"
        },
        {
            "location": "/MkDocs/markdown-cheat-sheet/#heading",
            "text": "# H1  ## H2  ### H3",
            "title": "Heading"
        },
        {
            "location": "/MkDocs/markdown-cheat-sheet/#bold",
            "text": "**bold text**",
            "title": "Bold"
        },
        {
            "location": "/MkDocs/markdown-cheat-sheet/#italic",
            "text": "*italicized text*",
            "title": "Italic"
        },
        {
            "location": "/MkDocs/markdown-cheat-sheet/#blockquote",
            "text": ">  blockquote",
            "title": "Blockquote"
        },
        {
            "location": "/MkDocs/markdown-cheat-sheet/#ordered-list",
            "text": "1.  First item 2.  Second item 3.  Third item",
            "title": "Ordered List"
        },
        {
            "location": "/MkDocs/markdown-cheat-sheet/#unordered-list",
            "text": "-  First item -  Second item -  Third item",
            "title": "Unordered List"
        },
        {
            "location": "/MkDocs/markdown-cheat-sheet/#code",
            "text": "`code`",
            "title": "Code"
        },
        {
            "location": "/MkDocs/markdown-cheat-sheet/#horizontal-rule",
            "text": "---",
            "title": "Horizontal Rule"
        },
        {
            "location": "/MkDocs/markdown-cheat-sheet/#link",
            "text": "[ Markdown Guide ]( https://www.markdownguide.org )",
            "title": "Link"
        },
        {
            "location": "/MkDocs/markdown-cheat-sheet/#image",
            "text": "![ alt text ]( https://www.markdownguide.org/assets/images/tux.png )",
            "title": "Image"
        },
        {
            "location": "/MkDocs/markdown-cheat-sheet/#extended-syntax",
            "text": "These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements.",
            "title": "Extended Syntax"
        },
        {
            "location": "/MkDocs/markdown-cheat-sheet/#table",
            "text": "| Syntax | Description |\n| ----------- | ----------- |\n| Header | Title |\n| Paragraph | Text |",
            "title": "Table"
        },
        {
            "location": "/MkDocs/markdown-cheat-sheet/#fenced-code-block",
            "text": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}",
            "title": "Fenced Code Block"
        },
        {
            "location": "/MkDocs/markdown-cheat-sheet/#footnote",
            "text": "Here's a sentence with a footnote. [^1]\n\n[ ^1 ]:  This is the footnote.",
            "title": "Footnote"
        },
        {
            "location": "/MkDocs/markdown-cheat-sheet/#heading-id",
            "text": "### My Great Heading ```{#custom-id}```",
            "title": "Heading ID"
        },
        {
            "location": "/MkDocs/markdown-cheat-sheet/#definition-list",
            "text": "term\n: definition",
            "title": "Definition List"
        },
        {
            "location": "/MkDocs/markdown-cheat-sheet/#strikethrough",
            "text": "~~The world is flat.~~\nor\n<s>The world is flat</s>",
            "title": "Strikethrough"
        },
        {
            "location": "/MkDocs/markdown-cheat-sheet/#task-list",
            "text": "- [x] Write the press release\n- [ ] Update the website\n- [ ] Contact the media",
            "title": "Task List"
        },
        {
            "location": "/MkDocs/markdown-cheat-sheet/#emoji",
            "text": "That is so funny!  :joy:  (See also  Copying and Pasting Emoji )",
            "title": "Emoji"
        },
        {
            "location": "/MkDocs/markdown-cheat-sheet/#highlight",
            "text": "I need to highlight these  ==very important words== .  OR  I need to highlight these  <mark> very important words <mark> .",
            "title": "Highlight"
        },
        {
            "location": "/MkDocs/markdown-cheat-sheet/#subscript",
            "text": "H~2~O",
            "title": "Subscript"
        },
        {
            "location": "/MkDocs/markdown-cheat-sheet/#superscript",
            "text": "X^2^",
            "title": "Superscript"
        }
    ]
}