{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to DocOcean DocOcean is my flashcard pack. Its a repository where I save all my notes, reference docs, cheetsheets and hacks that have helped add a spring in my step. Would be glad if it helps you too! May the odds be ever in your favour!","title":"Welcome to DocOcean"},{"location":"#welcome-to-dococean","text":"DocOcean is my flashcard pack. Its a repository where I save all my notes, reference docs, cheetsheets and hacks that have helped add a spring in my step. Would be glad if it helps you too! May the odds be ever in your favour!","title":"Welcome to DocOcean"},{"location":"GitHub/git_cheatsheet/","text":"vs Questions http://stackoverflow.com/questions/804115 ( rebase vs merge ). https://www.atlassian.com/git/tutorials/merging-vs-rebasing ( rebase vs merge ) https://www.atlassian.com/git/tutorials/undoing-changes/ ( reset vs checkout vs revert ) http://stackoverflow.com/questions/2221658 (HEAD^ vs HEAD~) (See git rev-parse ) http://stackoverflow.com/questions/292357 ( pull vs fetch ) http://stackoverflow.com/questions/39651 ( stash vs branch ) http://stackoverflow.com/questions/8358035 ( reset vs checkout vs revert ) http://stackoverflow.com/questions/5798930 ( git reset vs git rm --cached ) GENERAL QUESTIONS http://stackoverflow.com/questions/5788037 (Recover from git reset --hard ). http://stackoverflow.com/questions/1146973/ (Revert all local changes to previous state) http://effectif.com/git/recovering-lost-git-commits (Recovering lost commit) SHORT GIT REFERENCE All Git tips ( https://github.com/git-tips/tips ). Must See. First download the cheatsheet from official site: http://git-scm.com Now only these commands are important: Configuring : config, help . Creating : init, clone . Make Changes: status, diff, add, commit, reset, rm, mv (not important) . Branching & Merging: branch, checkout, merge, stash Review History: log, tag, diff, show Update and Publish: fetch, pull, push, remote . Very Imp: reflog . http://effectif.com/git/recovering-lost-git-commits Commands that are not in cheatsheet (and advanced): revert, apply, cherry-pick, rebase, clean, show-ref, update-ref, ls-files git stash is lightweight alternative to git branch . For fast reference see: http://gitref.org/ Git Tips: http://gitready.com/ Git has three stages: Committed : means data is safely stored in your local database. Modified : means you've changed the file but not committed. Staged : means you've marked a modified file in its current version to go into your next commit snapshot. Workflow of git: Working Directory: holds the actual files Index: Acts as a staging area. That is, snapshot for next commit. Will be done by git add command. HEAD : Points to the last commit (and current branch) you've made. Anything that is committed in Git can almost be recovered. However files which are not committed can't be recovered. Description of Update and Fetch Commands: remote : it only manage set of track repositories. fetch : You can fetch new work from that remote server after cloning. Not similar to clone . You can later merge that repo with your existing with merge command. pull : Automatically fetch and merge newest commit from remote server to local branch. By default, it combines fetch and merge. push : This will push to the remote server from local branch. When you do branch switching, files in your working directory will change to match that branch. Using git reflog you can get back your destroyed commit (done via git reset --hard ) using either git checkout -b newBranchName <shaViaReflog> git reset --hard <shaViaReflog> But use it in rare cases, because you reflog keep state via sha and it's hard to see which sha belongs to specific commit. git cherry-pick is a low level version of rebase . GIT TIPS AND SHORTCUTS Most used commands are: init, clone, status, log, add, commit, reset, rm, branch, checkout, merge, stash ## -- Initializing a new git repository $$ git init ## -- Useful git log commands $$ git log --oneline ## print short sha in one line $$ git log -3 ## show only first 3 commit $$ git log --author = \"John\" ## show commits only by this author ## -- Cloning a git repository ## The other protocols are: ssh, ftp, file://, http(s):// etc... $$ git clone git://github.com/something/foo.git ## -- Show the status of file $$ git status -s # in short format ## -- Add the file to staging area. $$ git add foo.js bar.js ## `--` is used to seperate files from `add` options. $$ git add . # add all the files ## -- Show what have changed since you last commit $$ git diff ## with a `--cached` option, show the changes that will go into the next commit snapshot. ## -- Commit the changes after you add the files to staging area $$ git commit -m 'with an inline message' ## -- Auto-commit and track changes to modified file. ## NOTE: The files you've not added doesn't track by commit with `-a` command. $$ git commit -a -m 'with an inline message' ## -- Ammend last commit (i.e, merge to previous commit) ## https://nathanhoad.net/git-amend-your-last-commit ## After doing `git add .` $$ git commit --amend # alternate is `git reset --soft HEAD~`. ## amend a commit without changing previous message $$ git commit --amend --no-edit ## -- Unstage file from the index only. See `git reset` also. ## NOTE: `git rm` without `--cached` will simply remove the file from both index and working directory. $$ git rm --cached # exact opposite of git add. ## -- Throw away local changes after commit (Use with caution) $$ git checkout <file> # if the branch name and file name are same, then do this $$ git checkout -- <file> ## for all changes (it's perfect for time travel on previous commit) $$ git checkout -f # or `git reset --hard` (but previous one is more safer because with that you're in detached state.) ## Delete a single entry from git reflog. (git reflog is useful as it keeps 2 months history). $$ git reflog delete HEAD@ { N } ## `N`: 1,2 etc... or <sha> ## Undo the last commit, but keep the history and adds a new history ## http://stackoverflow.com/questions/27032850/ (for `git reset` vs `git revert` with image) $$ git revert ## -- check where HEAD is $$ git show-ref ## Remove the initial commit (git reset doesn't work here, it works only after second commit) ## http://stackoverflow.com/questions/6632191/how-to-revert-initial-git-commit $$ git update-ref -d HEAD ## Push a specific branch $$ git push origin <mylocalbranch> ## -- Detailed explaination of `git reset` (all three options). P.S. Use git checkout for time travel. ## http://stackoverflow.com/a/6866485/2092405 ## NOTE: All the below three options remove log, so if you want to get back to previous state, you can pick ## <sha> from git reflog and do git reset on this. ## Suppose the structure is A-B-C \u2191 ( master ) ## Then, nuke commit C and never see it again. Do this: $$ git reset --hard HEAD~1 ## the result is: A-B \u2191 ( master ) ## To undo this command, use; $$ git reset --hard <newShaOfReflog> ## or (git reset --hard HEAD@{1}) ## Undo the last commit, but keep your changes in working directory. ## It will delete the index the from git log also and show you untracked and unstaged files: $$ git reset HEAD~1 ## move the pointer one index back (or git reset --mixed HEAD~1) ## the result is: A-B-C \u2191 ( master ) ## To undo this command, use; $$ git reset <newShaOfReflog> ## or (git reset HEAD@{1}) ## Undo the last commit, but don't touch the index and working directory. ## When you do git status, you'll see that the same files are in the index as before. ## In fact, right after this command, you could do `git commit` and you'd be redoing the same commit you just had. $$ git reset --soft HEAD~1 ## Add a changed file to old commit (not last commit). I.E., fix up old commit http://stackoverflow.com/a/2719659/2092405 ## merge a specific commit from one branch to another branch. ## make sure you're in the branch where you want merge. $$ git cherry-pick <commit-id-of-feature-branch> ## Merge two specific commit together (using rebase) http://stackoverflow.com/questions/2563632/how-can-i-merge-two-commits-into-one ## Modify a specific commit in git http://stackoverflow.com/questions/1186535/how-to-modify-a-specified-commit-in-git ## if you're getting this error. Needs a single revision. See this: http://stackoverflow.com/questions/26174757/ ## Option: 2 $ git checkout <shaToThatCommit> touch newfile.txt git add . git commit --amend --no-edit git rebase --onto HEAD <shaToThatCommit> master ## it will do automatic git checkout to master branch ## Branching and Merging ## --------------------- ## List out all the branches $$ git branch ## Create a new branch `testing` at your last commit $$ git branch testing ## Switch to branch $$ git checkout testing ## Shortcut to create a new branch and checkout $$ git checkout -b newbranch ## Delete a branch $$ git branch -d testing ## Merge the <branch> on the current working branch ## Merge tip: If you're doing merge say, from `wip` to `live` branch and you've edit `live` branch files ## then it will not undo changed file which is what we want. ## Also, merge conflict occurs when same file changed in both branch, you merged. You can reverse the merge conflict ## with `--abort` option $$ git merge testing ## this will merge `testing` branch onto current (`master`) branch. ## checkout arbitrary commits instead of branch $$ git checkout HEAD~2 ## Undo deleted branch $$ git reflog ## to see the hash code of branch before deletion. $$ git checkout <hashcodeFromReflog> ## to restore, and then create the same branch from there. Git reset vs Git revert NOTE : git revert is advanced command and it may accidently delete your files, if you haven't committed. http://stackoverflow.com/questions/8358035/whats-the-difference-between-git-revert-checkout-and-reset Basically git revert undo changes with new commit history (i.e., introduce a new commit that reverse the specified one) while git reset (with --hard ) BEWARE . Any changes to tracked files in the working tree and index are discarded. git reset (with --soft ) option doesn't touch the index file nor working tree. In this case, index file is staged but not committed and right after this command you can use git commit . git reset (with --mixed ) option reset the index but not the working tree. In this case, index file is not staged, so after this command you have to use git add and git commit . Git rm and Git reset git rm remove the file from the index (with --cached option). git reset is specifically about updating the index, moving the HEAD. These two options are equivalent only when we first add a file . After that with git reset you can move the index while with git rm --cached , you completly destroy the index. Fix a head detached from message http://stackoverflow.com/questions/10228760/fix-a-git-detached-head Basically checkout the branch using git checkout branchname Relative Refs https://www.atlassian.com/git/tutorials/refs-and-the-reflog/refspecs The ~ character lets you reach parent commits. For eg: The following display the grandparent of HEAD: git show HEAD~2 . The ~ character will always follow the first parent of a merge commit. If you want to follow different parent, use ^ character For eg: If HEAD is the merge commit, then following returns the second parent of HEAD: git show HEAD^2 Some examples: # Only list commits that are parent of the second parent of a merge commit $$ git log HEAD^2 # Remove the last 3 commits from the current branch $$ git reset HEAD~3 # Interactively rebase the last 3 commits on the current branch $$ git rebase -i HEAD~3 Git fetch , pull , push , remote NOTE: You can't push to non-bare repository if the branches are same on both remote and local server By default updating the current branch with non-bare repo is denied. If you're the only user, you can set git config git config --bool core.bare true and then delete all files except .git in remote. http://stackoverflow.com/a/2933656/2092405 Some common git urls: ssh:// [ user@ ] host.xz [ :port ] /path/to/repo.git/ git://host.xz [ :port ] /path/to/repo.git/ http [ s ] ://host.xz [ :port ] /path/to/repo.git/ ftp [ s ] ://host.xz [ :port ] /path/to/repo.git/ [ user@ ] host.xz:path/to/repo.git/ /path/to/repo.git/ file:///path/to/repo.git/ git pull is basically shorthand for git fetch followed by git merge FETCH_HEAD git fetch : Downlaod new data and branches from remote repository git push : Push your new branches to remote repository. git remote : Manage (list, add and delete) remote repository aliases. To push local repository to your server ## On your server (create a bare repository) $$ git init --bare repo.git ## On local $$ git remote add origin ssh://server/var/www/frontend.git $$ git push origin master ## After that, use: $$ cd /var/www/ ; git init ; git clone frontend.git ## or alternative way without bare repository ## switch to different branch locally ## and then on your server $$ git init ## from local repository $$ git push ssh://server/path/to/git otherBranch ## then merge the otherBranch to master in remote repository ## Shortcut without switching repository $$ git remote add origin ssh://server/path/to/git $$ git push origin master:someOtherBranch ## this push from master to `someOtherBranch`. END","title":"Git cheatsheet"},{"location":"GitHub/git_cheatsheet/#vs-questions","text":"http://stackoverflow.com/questions/804115 ( rebase vs merge ). https://www.atlassian.com/git/tutorials/merging-vs-rebasing ( rebase vs merge ) https://www.atlassian.com/git/tutorials/undoing-changes/ ( reset vs checkout vs revert ) http://stackoverflow.com/questions/2221658 (HEAD^ vs HEAD~) (See git rev-parse ) http://stackoverflow.com/questions/292357 ( pull vs fetch ) http://stackoverflow.com/questions/39651 ( stash vs branch ) http://stackoverflow.com/questions/8358035 ( reset vs checkout vs revert ) http://stackoverflow.com/questions/5798930 ( git reset vs git rm --cached )","title":"vs Questions"},{"location":"GitHub/git_cheatsheet/#general-questions","text":"http://stackoverflow.com/questions/5788037 (Recover from git reset --hard ). http://stackoverflow.com/questions/1146973/ (Revert all local changes to previous state) http://effectif.com/git/recovering-lost-git-commits (Recovering lost commit)","title":"GENERAL QUESTIONS"},{"location":"GitHub/git_cheatsheet/#short-git-reference","text":"All Git tips ( https://github.com/git-tips/tips ). Must See. First download the cheatsheet from official site: http://git-scm.com Now only these commands are important: Configuring : config, help . Creating : init, clone . Make Changes: status, diff, add, commit, reset, rm, mv (not important) . Branching & Merging: branch, checkout, merge, stash Review History: log, tag, diff, show Update and Publish: fetch, pull, push, remote . Very Imp: reflog . http://effectif.com/git/recovering-lost-git-commits Commands that are not in cheatsheet (and advanced): revert, apply, cherry-pick, rebase, clean, show-ref, update-ref, ls-files git stash is lightweight alternative to git branch . For fast reference see: http://gitref.org/ Git Tips: http://gitready.com/ Git has three stages: Committed : means data is safely stored in your local database. Modified : means you've changed the file but not committed. Staged : means you've marked a modified file in its current version to go into your next commit snapshot. Workflow of git: Working Directory: holds the actual files Index: Acts as a staging area. That is, snapshot for next commit. Will be done by git add command. HEAD : Points to the last commit (and current branch) you've made. Anything that is committed in Git can almost be recovered. However files which are not committed can't be recovered. Description of Update and Fetch Commands: remote : it only manage set of track repositories. fetch : You can fetch new work from that remote server after cloning. Not similar to clone . You can later merge that repo with your existing with merge command. pull : Automatically fetch and merge newest commit from remote server to local branch. By default, it combines fetch and merge. push : This will push to the remote server from local branch. When you do branch switching, files in your working directory will change to match that branch. Using git reflog you can get back your destroyed commit (done via git reset --hard ) using either git checkout -b newBranchName <shaViaReflog> git reset --hard <shaViaReflog> But use it in rare cases, because you reflog keep state via sha and it's hard to see which sha belongs to specific commit. git cherry-pick is a low level version of rebase .","title":"SHORT GIT REFERENCE"},{"location":"GitHub/git_cheatsheet/#git-tips-and-shortcuts","text":"Most used commands are: init, clone, status, log, add, commit, reset, rm, branch, checkout, merge, stash ## -- Initializing a new git repository $$ git init ## -- Useful git log commands $$ git log --oneline ## print short sha in one line $$ git log -3 ## show only first 3 commit $$ git log --author = \"John\" ## show commits only by this author ## -- Cloning a git repository ## The other protocols are: ssh, ftp, file://, http(s):// etc... $$ git clone git://github.com/something/foo.git ## -- Show the status of file $$ git status -s # in short format ## -- Add the file to staging area. $$ git add foo.js bar.js ## `--` is used to seperate files from `add` options. $$ git add . # add all the files ## -- Show what have changed since you last commit $$ git diff ## with a `--cached` option, show the changes that will go into the next commit snapshot. ## -- Commit the changes after you add the files to staging area $$ git commit -m 'with an inline message' ## -- Auto-commit and track changes to modified file. ## NOTE: The files you've not added doesn't track by commit with `-a` command. $$ git commit -a -m 'with an inline message' ## -- Ammend last commit (i.e, merge to previous commit) ## https://nathanhoad.net/git-amend-your-last-commit ## After doing `git add .` $$ git commit --amend # alternate is `git reset --soft HEAD~`. ## amend a commit without changing previous message $$ git commit --amend --no-edit ## -- Unstage file from the index only. See `git reset` also. ## NOTE: `git rm` without `--cached` will simply remove the file from both index and working directory. $$ git rm --cached # exact opposite of git add. ## -- Throw away local changes after commit (Use with caution) $$ git checkout <file> # if the branch name and file name are same, then do this $$ git checkout -- <file> ## for all changes (it's perfect for time travel on previous commit) $$ git checkout -f # or `git reset --hard` (but previous one is more safer because with that you're in detached state.) ## Delete a single entry from git reflog. (git reflog is useful as it keeps 2 months history). $$ git reflog delete HEAD@ { N } ## `N`: 1,2 etc... or <sha> ## Undo the last commit, but keep the history and adds a new history ## http://stackoverflow.com/questions/27032850/ (for `git reset` vs `git revert` with image) $$ git revert ## -- check where HEAD is $$ git show-ref ## Remove the initial commit (git reset doesn't work here, it works only after second commit) ## http://stackoverflow.com/questions/6632191/how-to-revert-initial-git-commit $$ git update-ref -d HEAD ## Push a specific branch $$ git push origin <mylocalbranch> ## -- Detailed explaination of `git reset` (all three options). P.S. Use git checkout for time travel. ## http://stackoverflow.com/a/6866485/2092405 ## NOTE: All the below three options remove log, so if you want to get back to previous state, you can pick ## <sha> from git reflog and do git reset on this. ## Suppose the structure is A-B-C \u2191 ( master ) ## Then, nuke commit C and never see it again. Do this: $$ git reset --hard HEAD~1 ## the result is: A-B \u2191 ( master ) ## To undo this command, use; $$ git reset --hard <newShaOfReflog> ## or (git reset --hard HEAD@{1}) ## Undo the last commit, but keep your changes in working directory. ## It will delete the index the from git log also and show you untracked and unstaged files: $$ git reset HEAD~1 ## move the pointer one index back (or git reset --mixed HEAD~1) ## the result is: A-B-C \u2191 ( master ) ## To undo this command, use; $$ git reset <newShaOfReflog> ## or (git reset HEAD@{1}) ## Undo the last commit, but don't touch the index and working directory. ## When you do git status, you'll see that the same files are in the index as before. ## In fact, right after this command, you could do `git commit` and you'd be redoing the same commit you just had. $$ git reset --soft HEAD~1 ## Add a changed file to old commit (not last commit). I.E., fix up old commit http://stackoverflow.com/a/2719659/2092405 ## merge a specific commit from one branch to another branch. ## make sure you're in the branch where you want merge. $$ git cherry-pick <commit-id-of-feature-branch> ## Merge two specific commit together (using rebase) http://stackoverflow.com/questions/2563632/how-can-i-merge-two-commits-into-one ## Modify a specific commit in git http://stackoverflow.com/questions/1186535/how-to-modify-a-specified-commit-in-git ## if you're getting this error. Needs a single revision. See this: http://stackoverflow.com/questions/26174757/ ## Option: 2 $ git checkout <shaToThatCommit> touch newfile.txt git add . git commit --amend --no-edit git rebase --onto HEAD <shaToThatCommit> master ## it will do automatic git checkout to master branch ## Branching and Merging ## --------------------- ## List out all the branches $$ git branch ## Create a new branch `testing` at your last commit $$ git branch testing ## Switch to branch $$ git checkout testing ## Shortcut to create a new branch and checkout $$ git checkout -b newbranch ## Delete a branch $$ git branch -d testing ## Merge the <branch> on the current working branch ## Merge tip: If you're doing merge say, from `wip` to `live` branch and you've edit `live` branch files ## then it will not undo changed file which is what we want. ## Also, merge conflict occurs when same file changed in both branch, you merged. You can reverse the merge conflict ## with `--abort` option $$ git merge testing ## this will merge `testing` branch onto current (`master`) branch. ## checkout arbitrary commits instead of branch $$ git checkout HEAD~2 ## Undo deleted branch $$ git reflog ## to see the hash code of branch before deletion. $$ git checkout <hashcodeFromReflog> ## to restore, and then create the same branch from there.","title":"GIT TIPS AND SHORTCUTS"},{"location":"GitHub/git_cheatsheet/#git-reset-vs-git-revert","text":"NOTE : git revert is advanced command and it may accidently delete your files, if you haven't committed. http://stackoverflow.com/questions/8358035/whats-the-difference-between-git-revert-checkout-and-reset Basically git revert undo changes with new commit history (i.e., introduce a new commit that reverse the specified one) while git reset (with --hard ) BEWARE . Any changes to tracked files in the working tree and index are discarded. git reset (with --soft ) option doesn't touch the index file nor working tree. In this case, index file is staged but not committed and right after this command you can use git commit . git reset (with --mixed ) option reset the index but not the working tree. In this case, index file is not staged, so after this command you have to use git add and git commit .","title":"Git reset vs Git revert"},{"location":"GitHub/git_cheatsheet/#git-rm-and-git-reset","text":"git rm remove the file from the index (with --cached option). git reset is specifically about updating the index, moving the HEAD. These two options are equivalent only when we first add a file . After that with git reset you can move the index while with git rm --cached , you completly destroy the index.","title":"Git rm and Git reset"},{"location":"GitHub/git_cheatsheet/#fix-a-head-detached-from-message","text":"http://stackoverflow.com/questions/10228760/fix-a-git-detached-head Basically checkout the branch using git checkout branchname","title":"Fix a head detached from message"},{"location":"GitHub/git_cheatsheet/#relative-refs","text":"https://www.atlassian.com/git/tutorials/refs-and-the-reflog/refspecs The ~ character lets you reach parent commits. For eg: The following display the grandparent of HEAD: git show HEAD~2 . The ~ character will always follow the first parent of a merge commit. If you want to follow different parent, use ^ character For eg: If HEAD is the merge commit, then following returns the second parent of HEAD: git show HEAD^2 Some examples: # Only list commits that are parent of the second parent of a merge commit $$ git log HEAD^2 # Remove the last 3 commits from the current branch $$ git reset HEAD~3 # Interactively rebase the last 3 commits on the current branch $$ git rebase -i HEAD~3","title":"Relative Refs"},{"location":"GitHub/git_cheatsheet/#git-fetch-pull-push-remote","text":"NOTE: You can't push to non-bare repository if the branches are same on both remote and local server By default updating the current branch with non-bare repo is denied. If you're the only user, you can set git config git config --bool core.bare true and then delete all files except .git in remote. http://stackoverflow.com/a/2933656/2092405 Some common git urls: ssh:// [ user@ ] host.xz [ :port ] /path/to/repo.git/ git://host.xz [ :port ] /path/to/repo.git/ http [ s ] ://host.xz [ :port ] /path/to/repo.git/ ftp [ s ] ://host.xz [ :port ] /path/to/repo.git/ [ user@ ] host.xz:path/to/repo.git/ /path/to/repo.git/ file:///path/to/repo.git/ git pull is basically shorthand for git fetch followed by git merge FETCH_HEAD git fetch : Downlaod new data and branches from remote repository git push : Push your new branches to remote repository. git remote : Manage (list, add and delete) remote repository aliases. To push local repository to your server ## On your server (create a bare repository) $$ git init --bare repo.git ## On local $$ git remote add origin ssh://server/var/www/frontend.git $$ git push origin master ## After that, use: $$ cd /var/www/ ; git init ; git clone frontend.git ## or alternative way without bare repository ## switch to different branch locally ## and then on your server $$ git init ## from local repository $$ git push ssh://server/path/to/git otherBranch ## then merge the otherBranch to master in remote repository ## Shortcut without switching repository $$ git remote add origin ssh://server/path/to/git $$ git push origin master:someOtherBranch ## this push from master to `someOtherBranch`.","title":"Git fetch, pull, push, remote"},{"location":"GitHub/git_cheatsheet/#end","text":"","title":"END"},{"location":"GitHub/gitignore/","text":"Adding a .gitignore into an exiting repository Create a .gitignore file within your repo using the touch command: touch .gitignore Commit all your pending changes using Then run this command, which removes everything from index: git rm -r --cached . Note The git rm command deletes files both from the Git repository as well as the filesystem. Using the cached flag, the actual file on disk will not be deleted. Then just stage all the files again by running: git add . Next Commit the staged changes, using: git commit -m \".gitignore is now working\" Finally push the commit to your repo: git push origin /<master/branch_name/> Caution Please be careful, when you push this to a repository and pull from somewhere else into a state where those files are still tracked, the files will be DELETED. References Stackoverflow: Apply .gitignore on an existing repository already tracking large number of files","title":"Gitignore"},{"location":"GitHub/gitignore/#adding-a-gitignore-into-an-exiting-repository","text":"Create a .gitignore file within your repo using the touch command: touch .gitignore Commit all your pending changes using Then run this command, which removes everything from index: git rm -r --cached . Note The git rm command deletes files both from the Git repository as well as the filesystem. Using the cached flag, the actual file on disk will not be deleted. Then just stage all the files again by running: git add . Next Commit the staged changes, using: git commit -m \".gitignore is now working\" Finally push the commit to your repo: git push origin /<master/branch_name/> Caution Please be careful, when you push this to a repository and pull from somewhere else into a state where those files are still tracked, the files will be DELETED.","title":"Adding a .gitignore into an exiting repository"},{"location":"GitHub/gitignore/#references","text":"Stackoverflow: Apply .gitignore on an existing repository already tracking large number of files","title":"References"},{"location":"Google%20Search%20Engine/","text":"Google Search Commands and Operators","title":"Index"},{"location":"MkDocs/getting_started/","text":"Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Upgrade Mkdocs pip3 install --upgrade mkdocs mkdocs-material cd mkdocsDir mkdocs build --clean Reverting to an older version of Mkdocs pip install mkdocs==0.16.1 mkdocs-material==1.2.0","title":"Getting started"},{"location":"MkDocs/getting_started/#_1","text":"","title":""},{"location":"MkDocs/getting_started/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"MkDocs/getting_started/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"MkDocs/getting_started/#upgrade-mkdocs","text":"pip3 install --upgrade mkdocs mkdocs-material cd mkdocsDir mkdocs build --clean","title":"Upgrade Mkdocs"},{"location":"MkDocs/getting_started/#reverting-to-an-older-version-of-mkdocs","text":"pip install mkdocs==0.16.1 mkdocs-material==1.2.0","title":"Reverting to an older version of Mkdocs"},{"location":"MkDocs/markdown-cheat-sheet/","text":"Markdown Cheat Sheet Thanks for visiting The Markdown Guide ! This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can\u2019t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax . Basic Syntax These are the elements outlined in John Gruber\u2019s original design document. All Markdown applications support these elements. Heading # H1 ## H2 ### H3 Bold **bold text** Italic *italicized text* Blockquote > blockquote Ordered List 1. First item 2. Second item 3. Third item Unordered List - First item - Second item - Third item Code `code` Horizontal Rule --- Link [ Markdown Guide ]( https://www.markdownguide.org ) Image ![ alt text ]( https://www.markdownguide.org/assets/images/tux.png ) Extended Syntax These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements. Table | Syntax | Description | | ----------- | ----------- | | Header | Title | | Paragraph | Text | Fenced Code Block { \"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25 } Footnote Here's a sentence with a footnote. [^1] [ ^1 ]: This is the footnote. Heading ID ### My Great Heading ```{#custom-id}``` Definition List term : definition Strikethrough ~~The world is flat.~~ or <s>The world is flat</s> Task List - [x] Write the press release - [ ] Update the website - [ ] Contact the media Emoji That is so funny! :joy: (See also Copying and Pasting Emoji ) Highlight I need to highlight these ==very important words== . OR I need to highlight these <mark> very important words <mark> . Subscript H~2~O Superscript X^2^","title":"Markdown Cheat Sheet"},{"location":"MkDocs/markdown-cheat-sheet/#markdown-cheat-sheet","text":"Thanks for visiting The Markdown Guide ! This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can\u2019t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax .","title":"Markdown Cheat Sheet"},{"location":"MkDocs/markdown-cheat-sheet/#basic-syntax","text":"These are the elements outlined in John Gruber\u2019s original design document. All Markdown applications support these elements.","title":"Basic Syntax"},{"location":"MkDocs/markdown-cheat-sheet/#heading","text":"# H1 ## H2 ### H3","title":"Heading"},{"location":"MkDocs/markdown-cheat-sheet/#bold","text":"**bold text**","title":"Bold"},{"location":"MkDocs/markdown-cheat-sheet/#italic","text":"*italicized text*","title":"Italic"},{"location":"MkDocs/markdown-cheat-sheet/#blockquote","text":"> blockquote","title":"Blockquote"},{"location":"MkDocs/markdown-cheat-sheet/#ordered-list","text":"1. First item 2. Second item 3. Third item","title":"Ordered List"},{"location":"MkDocs/markdown-cheat-sheet/#unordered-list","text":"- First item - Second item - Third item","title":"Unordered List"},{"location":"MkDocs/markdown-cheat-sheet/#code","text":"`code`","title":"Code"},{"location":"MkDocs/markdown-cheat-sheet/#horizontal-rule","text":"---","title":"Horizontal Rule"},{"location":"MkDocs/markdown-cheat-sheet/#link","text":"[ Markdown Guide ]( https://www.markdownguide.org )","title":"Link"},{"location":"MkDocs/markdown-cheat-sheet/#image","text":"![ alt text ]( https://www.markdownguide.org/assets/images/tux.png )","title":"Image"},{"location":"MkDocs/markdown-cheat-sheet/#extended-syntax","text":"These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements.","title":"Extended Syntax"},{"location":"MkDocs/markdown-cheat-sheet/#table","text":"| Syntax | Description | | ----------- | ----------- | | Header | Title | | Paragraph | Text |","title":"Table"},{"location":"MkDocs/markdown-cheat-sheet/#fenced-code-block","text":"{ \"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25 }","title":"Fenced Code Block"},{"location":"MkDocs/markdown-cheat-sheet/#footnote","text":"Here's a sentence with a footnote. [^1] [ ^1 ]: This is the footnote.","title":"Footnote"},{"location":"MkDocs/markdown-cheat-sheet/#heading-id","text":"### My Great Heading ```{#custom-id}```","title":"Heading ID"},{"location":"MkDocs/markdown-cheat-sheet/#definition-list","text":"term : definition","title":"Definition List"},{"location":"MkDocs/markdown-cheat-sheet/#strikethrough","text":"~~The world is flat.~~ or <s>The world is flat</s>","title":"Strikethrough"},{"location":"MkDocs/markdown-cheat-sheet/#task-list","text":"- [x] Write the press release - [ ] Update the website - [ ] Contact the media","title":"Task List"},{"location":"MkDocs/markdown-cheat-sheet/#emoji","text":"That is so funny! :joy: (See also Copying and Pasting Emoji )","title":"Emoji"},{"location":"MkDocs/markdown-cheat-sheet/#highlight","text":"I need to highlight these ==very important words== . OR I need to highlight these <mark> very important words <mark> .","title":"Highlight"},{"location":"MkDocs/markdown-cheat-sheet/#subscript","text":"H~2~O","title":"Subscript"},{"location":"MkDocs/markdown-cheat-sheet/#superscript","text":"X^2^","title":"Superscript"},{"location":"Python/virtualenv/","text":"VirtualEnv commands Dipping my toes into the Python ocean was purely out of curiosity. When I was still a Ruby developer, everyone talked about Python. I just had to understand what the hype was all about. So on one gloomy need-for-motivation day, I decided to pick up Python as I challenged myself with Codewars Katas. The first thing that got on my nerves was the differences in the Python versions 2.7 and 3.*. Every time I tried to look up something and implement it into my solutions, the terminal would shriek at me. It was a struggle. Thanks to the millions of ways Python allows you to do one thing, my already-in-love-with-ruby brain almost hated it. I couldn't understand the appropriate and optimized way to solve a problem. But I wasn't ready to give up just yet. I had to know why everyone loved Python so much (maybe I just wanted to prove my love for ruby, meh!). It wasn't until much later I understood why Python had such a huge fan following. Although I like the fully-object-oriented ways of Ruby, I have come to appreciate Python's not-mainly-focused-on-web ways and its humungous community that help me find solutions to problems so easily. Now when I think of it, it also probably had to do with the number of problems setting up a virtual environment has solved for me! \ud83d\ude05 Creating a virtual environment python3.9 -m venv <my_venv or /path/to/my_venv> Creates a virtual environment called my_venv which is placed under the current directory. You can also pass the path to where you'd want to create your virtual environment instead of just its name. Activating a virtual environment $ source <my_venv or /path/to/my_venv>/bin/activate Once you run this you will notice each line in the terminal begins with <my_venv> , which means your virtual environment is active. Deactivate a virtual environment $ deactivate After you run this you will notice the <ny_venv> on terminal disappears, meaning your virtual environment has been turnned off. Remove/Delete a virtual environment $ rm -rf <my_venv or /path/to/my_venv> Deleting it through the UI could taake a bit of time. Clear out an existing virtual environment $ python3 -m venv --clear <my_venv or /path/to/my_venv> Sometimes, instead of completely deleting a virtual environment, you may instead want to clear all the packages that were previously installed. Update Python version $ python3 -m venv <my_venv or /path/to/my_venv> --upgrade Now if you want to instruct the environment to use the existing Python version, that it is assumed that it was upgraded in-place, then simply provide the --upgrade flag Give virtual environment access to system site-packages $ python3 -m venv <my_venv or /path/to/my_venv> --system-site-packages The dependencies installed in a virtual environment are isolated from the corresponding packages installed in the actual system or in any other environment, but by using the --system-site-packages flag you can access them. Caution This is not a recommended approach, use it only if there is no other way. Skip pip installation $ python3 -m venv <my_venv or /path/to/my_venv> --without-pip You can skip the installation and/or upgrade of pip (which is the default package manager) then you can do so by passing the --without-pip flag. Help with venv commands $ python3 -m venv -h The -h flag usually has answers to most questions.","title":"VirtualEnv commands"},{"location":"Python/virtualenv/#virtualenv-commands","text":"Dipping my toes into the Python ocean was purely out of curiosity. When I was still a Ruby developer, everyone talked about Python. I just had to understand what the hype was all about. So on one gloomy need-for-motivation day, I decided to pick up Python as I challenged myself with Codewars Katas. The first thing that got on my nerves was the differences in the Python versions 2.7 and 3.*. Every time I tried to look up something and implement it into my solutions, the terminal would shriek at me. It was a struggle. Thanks to the millions of ways Python allows you to do one thing, my already-in-love-with-ruby brain almost hated it. I couldn't understand the appropriate and optimized way to solve a problem. But I wasn't ready to give up just yet. I had to know why everyone loved Python so much (maybe I just wanted to prove my love for ruby, meh!). It wasn't until much later I understood why Python had such a huge fan following. Although I like the fully-object-oriented ways of Ruby, I have come to appreciate Python's not-mainly-focused-on-web ways and its humungous community that help me find solutions to problems so easily. Now when I think of it, it also probably had to do with the number of problems setting up a virtual environment has solved for me! \ud83d\ude05","title":"VirtualEnv commands"},{"location":"Python/virtualenv/#creating-a-virtual-environment","text":"python3.9 -m venv <my_venv or /path/to/my_venv> Creates a virtual environment called my_venv which is placed under the current directory. You can also pass the path to where you'd want to create your virtual environment instead of just its name.","title":"Creating a virtual environment"},{"location":"Python/virtualenv/#activating-a-virtual-environment","text":"$ source <my_venv or /path/to/my_venv>/bin/activate Once you run this you will notice each line in the terminal begins with <my_venv> , which means your virtual environment is active.","title":"Activating a virtual environment"},{"location":"Python/virtualenv/#deactivate-a-virtual-environment","text":"$ deactivate After you run this you will notice the <ny_venv> on terminal disappears, meaning your virtual environment has been turnned off.","title":"Deactivate a virtual environment"},{"location":"Python/virtualenv/#removedelete-a-virtual-environment","text":"$ rm -rf <my_venv or /path/to/my_venv> Deleting it through the UI could taake a bit of time.","title":"Remove/Delete a virtual environment"},{"location":"Python/virtualenv/#clear-out-an-existing-virtual-environment","text":"$ python3 -m venv --clear <my_venv or /path/to/my_venv> Sometimes, instead of completely deleting a virtual environment, you may instead want to clear all the packages that were previously installed.","title":"Clear out an existing virtual environment"},{"location":"Python/virtualenv/#update-python-version","text":"$ python3 -m venv <my_venv or /path/to/my_venv> --upgrade Now if you want to instruct the environment to use the existing Python version, that it is assumed that it was upgraded in-place, then simply provide the --upgrade flag","title":"Update Python version"},{"location":"Python/virtualenv/#give-virtual-environment-access-to-system-site-packages","text":"$ python3 -m venv <my_venv or /path/to/my_venv> --system-site-packages The dependencies installed in a virtual environment are isolated from the corresponding packages installed in the actual system or in any other environment, but by using the --system-site-packages flag you can access them. Caution This is not a recommended approach, use it only if there is no other way.","title":"Give virtual environment access to system site-packages"},{"location":"Python/virtualenv/#skip-pip-installation","text":"$ python3 -m venv <my_venv or /path/to/my_venv> --without-pip You can skip the installation and/or upgrade of pip (which is the default package manager) then you can do so by passing the --without-pip flag.","title":"Skip pip installation"},{"location":"Python/virtualenv/#help-with-venv-commands","text":"$ python3 -m venv -h The -h flag usually has answers to most questions.","title":"Help with venv commands"}]}